#!/bin/bash

list=$1
N=`wc ${1} | awk '{print $1}'`
threads=96
#threadsX2=$((${threads}*2))

OCD=/scratch/03263/jcha9928/data/OCD/
OCD_code=$OCD/code_OCD_image_analysis
OCD_job=$OCD_code/job
#DATA_target=$STERN/image03/dwi_eddy

CMD_batch=$OCD_code/cmd2.OCD.batch.preproc.${list}
rm -rf $CMD_batch


i=1
for s in `cat $OCD_code/$list`
do
#s=`echo $SUBJECT | egrep -o '[0-9]{8}'`

  CMD=$OCD_job/tckgen.stampede2.${s}
  rm -rf $CMD

  LOG=$OCD_job/log.tckgen.stampede2.${s}
  rm -rf $LOG

  subject=`echo $s | cut -d "_" -f1`
  sess=`echo $s | cut -d "_" -f2`

#CMD_sub=/lus/theta-fs0/projects/AD_Brain_Imaging/anal/HBN/code_hbn_alcf/job/cmd2_sub.trac.${s}
#rm -rf $CMD_sub


#echo ${SUBJECT}

cat<<EOC >$CMD
#!/bin/bash
source ~/.bashrc
DATA_source=$OCD/dwi/${s}
DATA_target=$OCD/dwi/${s}

workingdir=/tmp/${s}/
mkdir -p \${workingdir}
cd \${workingdir}
echo current directory is \`pwd\`

################################################################################
################################## FROM MASKING TO FOD GENERATION ##############
################################################################################
################################################################################

## From dwipreprocssed images....
im=mr_dwi_preproc_cuda_repol_s2v_iter8

dwiextract \${DATA_target}/\${im}.mif \
          - -bzero \
          -nthreads ${threads} | mrmath - mean \
           -force mr_meanb0_nonbiascorr.mif -axis 3 -quiet -nthreads ${threads}
sleep 0.1

mrconvert mr_meanb0_nonbiascorr.mif \
          mr_meanb0_nonbiascorr.nii.gz \
          -force -quiet -nthreads ${threads}
sleep 0.1

bet2 mr_meanb0_nonbiascorr mr_meanb0_nonbiascorr_bet2 -m -f 0.1 -v
sleep 0.1

dwi2mask \${DATA_target}/\${im}.mif mr_dwi_mask.mif -force -nthreads ${threads}
sleep 0.1

dwi2mask \${DATA_target}/\${im}.mif - -nthreads ${threads} -quiet | maskfilter - erode \
-npass 3 -force mr_eroded_mask.mif -quiet -nthreads ${threads}
sleep 0.1

time dwibiascorrect \${DATA_target}/\${im}.mif -force \
                  mr_dwi_preproc_repol_biasCorr.mif -fsl \
                  -nthreads ${threads} -mask mr_meanb0_nonbiascorr_bet2_mask.nii.gz
sleep 0.1

mrconvert mr_meanb0_nonbiascorr_bet2_mask.nii.gz \
        mr_meanb0_nonbiascorr_bet2_mask.mif -force -nthreads ${threads}
sleep 0.1

dwiextract mr_dwi_preproc_repol_biasCorr.mif - -bzero -quiet \
          -nthreads ${threads} | mrmath - mean \
          -force mr_meanb0.mif -axis 3 -quiet -nthreads ${threads}
sleep 0.1

mrconvert mr_meanb0.mif mr_meanb0.nii.gz -force -quiet -nthreads ${threads}
sleep 0.1

bet2 mr_meanb0 mr_meanb0_bet -m -f 0.2
sleep 0.1

mrresize mr_meanb0_bet.nii.gz -voxel 1.25 mr_meanb0_bet_upsample125.nii.gz \
        -force -interp sinc -nthreads ${threads} -quiet
sleep 0.1

mrresize mr_meanb0_bet_mask.nii.gz -voxel 1.25 mr_meanb0_bet_mask_upsample125.nii.gz \
        -force -interp sinc -nthreads ${threads} -quiet
sleep 0.1

#%% 8. upsampling %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for im in mr_dwi_preproc_repol_biasCorr mr_meanb0_nonbiascorr_bet2_mask mr_meanb0;
do
     	mrresize \${im}.mif -voxel 1.25 -force \${im}_upsample125.mif \
                -interp sinc -nthreads ${threads}
sleep 0.1
done

dwi2mask mr_dwi_preproc_repol_biasCorr_upsample125.mif - -quiet \
  -nthreads ${threads} | maskfilter - dilate -npass 3 mr_dilate_mask_upsample125.mif \
  -force -quiet -nthreads ${threads}
sleep 0.1

dwi2mask mr_dwi_preproc_repol_biasCorr_upsample125.mif \
  mr_mask_upsample125.mif -nthreads ${threads} -force
sleep 0.1


mrconvert mr_dwi_preproc_repol_biasCorr_upsample125.mif \
        mr_dwi_preproc_repol_biasCorr_upsample125.nii.gz \
        -force -nthreads ${threads}
sleep 0.1

bet2 mr_dwi_preproc_repol_biasCorr_upsample125 \
        mr_dwi_preproc_repol_biasCorr_upsample125_bet2 -m -f 0.2 -v
sleep 0.1

################################################################################
################################################################################
##################Preparation for 5TT using freesurfer APARC+ASEG ##############
################################################################################
################################################################################

echo ***** NOW 5TTGEN *****

workingdir2=$OCD/fs/${s}/mri

### flirt
echo *****NOW GENERATING ANAT2DIFF.FLT.MAT *****
mrconvert \${workingdir2}/brain.mgz brain.nii.gz -stride -1,2,3 -force
sleep 0.1

mrconvert \${workingdir2}/aparc+aseg.mgz aparc+aseg.nii.gz -stride -1,2,3 -force
sleep 0.1

mrconvert \${workingdir2}/aparc.a2009s+aseg.mgz aparc.a2009s+aseg.nii.gz \
          -stride -1,2,3 -force
sleep 0.1


#1. rigid transformation
flirt -in brain -ref mr_meanb0_bet -out brain2diff_flt_dof6 \
      -omat brain2diff_dof6.flt.mat -v -dof 6
sleep 0.1

#2. ants nonlinear warping
${OCD_code}/antswarp brain2diff_flt_dof6 \
          mr_meanb0_bet
sleep 0.1

#3. 5ttgen
time 5ttgen freesurfer aparc+aseg.nii.gz 5tt_freesurfer.nii.gz -nocrop \
            -sgm_amyg_hipp -force -nthreads ${threads}
sleep 0.1


#4. registering 5ttgen into meanb0-linear
flirt -in 5tt_freesurfer -ref mr_meanb0_bet -out 5tt_freesurfer_diff_flt_dof6 \
	     -applyxfm -init brain2diff_dof6.flt.mat -v -interp nearestneighbour
sleep 0.1

#4. registering 5ttgen into meanb0-nonlinear
fslsplit 5tt_freesurfer_diff_flt_dof6.nii.gz tmp_5tt -t
sleep 0.1

for i in \`seq 0 4\`;
do
WarpImageMultiTransform 3 tmp_5tt000\${i}.nii.gz tmp_5tt000\${i}_warped.nii.gz --use-NN \
	-R mr_meanb0_bet.nii.gz brain2diff_flt_dof62mr_meanb0_bet_synantsWarp.nii.gz brain2diff_flt_dof62mr_meanb0_bet_synantsAffine.txt
sleep 0.1

done

fslmerge -t 5tt_freesurfer_diff_flt_dof6_warped_synant \`imglob tmp_5tt000*_warped.nii.gz\`
#upsample to 1.25
sleep 0.1

mrresize 5tt_freesurfer_diff_flt_dof6_warped_synant.nii.gz -voxel 1.25 5tt_freesurfer_diff_flt_dof6_warped_synant_upsample125.nii.gz \
	-force -nthreads ${threads} -interp nearest
sleep 0.1

ln -sf 5tt_freesurfer_diff_flt_dof6_warped_synant_upsample125.nii.gz 5tt_diff_upsample125.nii.gz
sleep 0.1

#5. also registering aparc/aseg files
#5-1. flirt rigid
flirt -in aparc+aseg -ref mr_meanb0_bet -out aparc+aseg_diff_flt_dof6 \
	   -applyxfm -init brain2diff_dof6.flt.mat -v -interp nearestneighbour
sleep 0.1

flirt -in aparc.a2009s+aseg -ref mr_meanb0_bet -out aparc.a2009s+aseg_diff_flt_dof6 \
	   -applyxfm -init brain2diff_dof6.flt.mat -v -interp nearestneighbour
sleep 0.1


#5-2. antswarp
WarpImageMultiTransform 3 aparc+aseg_diff_flt_dof6.nii.gz aparc+aseg_diff_flt_dof6_warped_synant.nii.gz --use-NN \
	-R mr_meanb0_bet.nii.gz brain2diff_flt_dof62mr_meanb0_bet_synantsWarp.nii.gz brain2diff_flt_dof62mr_meanb0_bet_synantsAffine.txt
sleep 0.1

WarpImageMultiTransform 3 aparc.a2009s+aseg_diff_flt_dof6.nii.gz aparc.a2009s+aseg_diff_flt_dof6_warped_synant.nii.gz --use-NN \
	-R mr_meanb0_bet.nii.gz brain2diff_flt_dof62mr_meanb0_bet_synantsWarp.nii.gz brain2diff_flt_dof62mr_meanb0_bet_synantsAffine.txt
sleep 0.1


#5-3 upsample them
mrresize aparc+aseg_diff_flt_dof6_warped_synant.nii.gz -voxel 1.25 aparc+aseg_diff_flt_dof6_warped_synant_upsample125.nii.gz \
	-force -nthreads ${threads} -interp nearest -datatype  uint32
sleep 0.1

mrresize aparc.a2009s+aseg_diff_flt_dof6_warped_synant.nii.gz -voxel 1.25 aparc.a2009s+aseg_diff_flt_dof6_warped_synant_upsample125.nii.gz \
	-force -nthreads ${threads} -interp nearest -datatype  uint32
sleep 0.1

#5tt2gmwmi and label
5tt2gmwmi 5tt_diff_upsample125.nii.gz -force 5tt_diff_upsample125_gmwmi_mask.mif -force -nthreads ${threads}
sleep 0.1

labelconvert aparc+aseg_diff_flt_dof6_warped_synant_upsample125.nii.gz $FREESURFER_HOME/FreeSurferColorLUT.txt \
	/work/03263/jcha9928/stampede2/app/mrtrix3/share/mrtrix3/labelconvert/fs_default.txt \
	nodes_aparc+aseg.mif -force
sleep 0.1

labelconvert aparc.a2009s+aseg_diff_flt_dof6_warped_synant_upsample125.nii.gz $FREESURFER_HOME/FreeSurferColorLUT.txt \
	/work/03263/jcha9928/stampede2/app/mrtrix3/share/mrtrix3/labelconvert/fs_a2009s.txt \
	nodes_aparc.a2009s+aseg.mif -force
sleep 0.1


##########################################################################################################################################
##########################################################################################################################################
#%% 9. dwi2response-subject level %%%%%%%%%%%  (time: 10m)
#if [ ! -e response_wm.txt ]; then
    echo dwi2response
#    time dwi2response msmt_5tt mr_dwi_denoised_gibbs_crop_preproc_biasCorr.mif 5tt_freesurfer2diff.nii.gz \
#            response_wm.txt response_gm.txt response_csf.txt \
#            -voxels response_voxels.mif -force -nthreads 256
#fi

time dwi2response dhollander mr_dwi_preproc_repol_biasCorr_upsample125.mif \
            response_wm.txt response_gm.txt response_csf.txt \
            -voxels response_voxels.mif -force -nthreads ${threads} -mask mr_dwi_preproc_repol_biasCorr_upsample125_bet2.nii.gz
#%% FOD%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
### FOD estimation (time: 3m)
#if [ ! -e WM_FODs_upsample125.mif ];then
   echo dwi2fod

   ### DWI2FOD only for 2 Tissue Types (except for GM-because it's single shell)
   time dwi2fod msmt_csd mr_dwi_preproc_repol_biasCorr_upsample125.mif \
            response_wm.txt \
            WM_FODs_upsample125.mif \
             response_csf.txt csf.mif \
            -mask mr_meanb0_bet_mask_upsample125.nii.gz \
            -force -nthreads ${threads}
#fi
#if [ ! -e tissueRGB.mif ]; then
   mrconvert WM_FODs_upsample125.mif - -coord 3 0 -nthreads ${threads} -quiet | \
   mrcat csf.mif gm.mif - tissueRGB.mif -axis 3 -nthreads ${threads}
#fi
### this is crucial to make the FODs comparable across subjects### (time: 1m)

echo mtnorm *only using WM and CSF but no GM*
time mtnormalise WM_FODs_upsample125.mif WM_FODs_upsample125_norm.mif \
              csf.mif csf_norm.mif \
              -mask mr_meanb0_bet_mask_upsample125.nii.gz \
              -nthreads ${threads} -force

mrconvert mr_dwi_preproc_repol_biasCorr_upsample125.mif \
      mmr_dwi_preproc_repol_biasCorr_upsample125.nii.gz \
      -force -nthreads ${threads}

mrconvert mr_dilate_mask_upsample125.mif mr_dilate_mask_upsample125.nii.gz \
      -force -nthreads ${threads}

#dtifit -k mr_dwi_denoised_gibbs_crop_preproc_biasCorr_upsample125.nii.gz -o dtifit \
#    -m mr_meanb0_bet_mask_upsample125.nii.gz -r dti.bvec -b dti.bval -V

dwi2tensor mr_dwi_preproc_repol_biasCorr_upsample125.mif \
    -mask mr_meanb0_bet_mask_upsample125.nii.gz mr_tensor.mif \
    -force -nthreads ${threads}

tensor2metric mr_tensor.mif -fa mr_DTI_FA.mif -force -nthreads ${threads}
tensor2metric mr_tensor.mif -adc mr_DTI_MD.mif -force -nthreads ${threads}
tensor2metric mr_tensor.mif -ad mr_DTI_AD.mif -force -nthreads ${threads}
tensor2metric mr_tensor.mif -rd mr_DTI_RD.mif -force -nthreads ${threads}

###benchmark time is ~8M using TACC-SKX-96 threads##############################

################################################################################
################################### STREAMLINE TRACTOGRAPHY ####################
###########################################(2.5 Min for 1M)#####################
###########################################(60 Min for 20M)#####################

###tckgen and connectome (time to 1M for tckgen = 5.5m "ALCF-Theta");
###                      (time to 1M for tckgen = 2.5m "TACC-Stampede2-SKX")

time tckgen WM_FODs_upsample125_norm.mif mr_track_20M.tck \
  -act 5tt_freesurfer_diff_flt_dof6_warped_synant_upsample125.nii.gz \
  -backtrack -crop_at_gmwmi -seed_dynamic WM_FODs_upsample125_norm.mif \
  -angle 22.5 -maxlength 250 -minlength 10 -power 1.0 -select 20M -force \
  -nthreads ${threads} && echo 'tckgen done'**********



  ################################################################################
  ################################### TCKSIFT ####################
  ###########################################(5 Min for 1M)#######################
  ################################################################################

  time tcksift -act 5tt_freesurfer_diff_flt_dof6_warped_synant_upsample125.nii.gz \
    mr_track_20M.tck WM_FODs_upsample125_norm.mif \
    mr_track_2M_SIFT.tck -term_number 2M -force -nthreads ${threads} && \
    echo 'sift done'*******


    ################################################################################
    ################################################################################
    ################################### tck2connectome #############################
    ################################################################################
    ################################################################################

    ## FA, MD, AD, RD (L2+L3/2)
    for dti in FA MD AD RD
    do

    tcksample mr_track_2M_SIFT.tck mr_DTI_\${dti}.mif \
      mr_track_2M_SIFT_mean_\${dti}.csv \
      -stat_tck mean -force -nthreads ${threads}

    #tcksample mr_track_global_1e9.tck mr_DTI_\${dti}.mif \
    #  mr_track_global_1e9_mean_\${dti}.csv \
    #   -stat_tck mean -force -nthreads ${threads}
    done


    for im in aparc+aseg aparc.a2009s+aseg
    do
    #1.count
    tck2connectome -force -zero_diagonal -nthreads ${threads} \
                mr_track_2M_SIFT.tck nodes_\${im}.mif mr_connectome_sift_2M_\${im}_count.csv
    #tck2connectome -force -zero_diagonal -nthreads ${threads} \
    #            mr_track_global_1e9.tck nodes_\${im}.mif mr_connectome_global1e9_\${im}_count.csv
    #2.length
    tck2connectome -force -zero_diagonal -scale_length -stat_edge mean mr_track_2M_SIFT.tck nodes_\${im}.mif \
                mr_connectome_sift_2M_\${im}_length.csv -nthreads ${threads}
    #tck2connectome -force -zero_diagonal -scale_length -stat_edge mean mr_track_global_1e9.tck nodes_\${im}.mif \
    #            mr_connectome_global1e9_\${im}_length.csv -nthreads ${threads}

    #3-7: FA MD M0 AD RD
       for dti in FA MD AD RD
       do

    tck2connectome -force -zero_diagonal -stat_edge mean -scale_file mr_track_2M_SIFT_mean_\${dti}.csv \
                  -nthreads ${threads} mr_track_2M_SIFT.tck nodes_\${im}.mif \
                  mr_connectome_sift_2M_\${im}_\${dti}.csv

    #tck2connectome -force -zero_diagonal -stat_edge mean -scale_file mr_track_2M_SIFT_mean_\${dti}.csv \
    #              -nthreads ${threads} mr_track_global_1e9.tck nodes_\${im}.mif \
    #              mr_connectome_global1e9_\${im}_\${dti}.csv
       done
    done


    ######################################################################################################################################
    ######################################################################################################################################
    ######################################################################################################################################
    ######################################################################################################################################


echo "I THINK EVERYTHING IS DONE BY NOW"

cp -frv ./* \${DATA_target}

EOC

################################################## END OF CMD##########################################################
chmod +x $CMD
echo "$CMD > ./job/output_subject_${s}_\${LAUNCHER_JID}_\${LAUNCHER_TSK_ID} 2>&1 " >> $CMD_batch

done

### batch submission############################################################
rm batch*
n_list=`wc list_tckgen | awk '{print $1}'`
n_split=$((n_list/5+1))
split -l $n_split $CMD_batch batch

for b in `ls batch*`
do
launch_script=${OCD_job}/script_${b}

cat<<EOM > $launch_script
#!/bin/bash
#SBATCH -J pretckgen           # Job name
#%###SBATCH -o ./job/mrx1.o%j       # Name of stdout output file
#%###SBATCH -e ./job/mrx1.e%j       # Name of stderr error file
#SBATCH -p skx-normal          # Queue (partition) name
#SBATCH -N `wc -l $b | awk '{print $1}'`               # Total # of nodes
#SBATCH -n `wc -l $b | awk '{print $1}'`            # Total # of mpi tasks
#SBATCH -t 03:00:00        # Run time (hh:mm:ss)
#SBATCH --mail-user=cha.jiook@gmail.com
#SBATCH --mail-type=all    # Send email at begin and end of job
#SBATCH -A TG-TRA120004

# Other commands must follow all #SBATCH directives...
module list
pwd
date
module load launcher
sleep 3

export LAUNCHER_PLUGIN_DIR=\$LAUNCHER_DIR/plugins
export LAUNCHER_RMI=SLURM
export LAUNCHER_JOB_FILE=`echo $b`

# Launch MPI code...
\$LAUNCHER_DIR/paramrun
EOM

echo sbatch $launch_script
done
